{"version":3,"sources":["Context/TodoContextReducer.js","Context/TodoContext.js","reducers/todo/index.js","reducers/index.js","actions/todo/index.js","redux/index.js","ApolloClient/index.js","components/AddTodo/index.js","components/TodoItem/index.js","components/TodoList/index.js","components/Context/index.js","components/Redux/index.js","components/Apollo/query.js","components/Apollo/index.js","App.js","serviceWorker.js","index.js"],"names":["state","action","type","newTodo","id","todos","length","todo","payload","complete","updatedTodos","map","filteredTodos","filter","TodoContext","createContext","TodoState","props","useReducer","TodoContextReducer","dispatch","Provider","value","addTodo","updateTodo","deleteTodo","children","initialState","rootReducer","todoState","RootState","combineReducers","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","todosVar","makeVar","cache","InMemoryCache","typePolicies","Query","fields","read","client","ApolloClient","connectToDevTools","AddTodo","useState","todoText","setTodoText","handleAdd","handleSubmit","e","preventDefault","onSubmit","Grid","container","spacing","item","xs","TextField","placeholder","onChange","target","fullWidth","Button","variant","color","disabled","onClick","TodoItem","handleUpdate","handleDelete","listItemTextStyle","textDecoration","ListItem","button","ListItemText","primary","style","ListItemIcon","PropTypes","arrayOf","shape","number","isRequired","string","bool","func","TodoList","List","key","Context","todoContext","useContext","theme","useTheme","Paper","padding","justify","icon","reactIcon","width","height","Typography","component","align","gutterBottom","Redux","useSelector","useDispatch","reduxIcon","GET_TODOS","gql","Apollo","data","useQuery","text","allTodos","useUpdateTodo","useDeleteTodo","apollostackIcon","App","className","Container","maxWidth","paddingTop","paddingBottom","sm","md","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAIe,WAACA,EAAOC,GACrB,OAAQA,EAAOC,MACb,IANoB,WAOlB,IAAMC,EAAU,CACdC,GAAIJ,EAAMK,MAAMC,OAChBC,KAAMN,EAAOO,QACbC,UAAU,GAGZ,OAAO,eACFT,EADL,CAEEK,MAAM,GAAD,mBAAML,EAAMK,OAAZ,CAAmBF,MAE5B,IAhBuB,cAiBrB,IAAMO,EAAeV,EAAMK,MAAMM,KAAI,SAACJ,GAKpC,OAJIA,EAAKH,KAAOH,EAAOO,UACrBD,EAAKE,UAAYF,EAAKE,UAGjBF,KAGT,OAAO,eACFP,EADL,CAEEK,MAAOK,IAEX,IA5BuB,cA6BrB,IAAME,EAAgBZ,EAAMK,MAAMQ,QAChC,SAACN,GAAD,OAAUA,EAAKH,KAAOH,EAAOO,WAE/B,OAAO,eACFR,EADL,CAEEK,MAAOO,IAEX,QACE,OAAOZ,IC/BAc,EAAcC,0BA4CZC,EA1CG,SAACC,GACjB,IAD2B,EAKDC,qBAAWC,EAJhB,CACnBd,MAAO,KAFkB,mBAKpBL,EALoB,KAKboB,EALa,KA4B3B,OACE,kBAACN,EAAYO,SAAb,CACEC,MAAO,CACLjB,MAAOL,EAAMK,MACbkB,QAzBU,SAAChB,GACfa,EAAS,CACPlB,KDnBkB,WCoBlBM,QAASD,KAuBPiB,WAnBa,SAACjB,GAClBa,EAAS,CACPlB,KDzBqB,cC0BrBM,QAASD,KAiBPkB,WAba,SAAClB,GAClBa,EAAS,CACPlB,KD/BqB,cCgCrBM,QAASD,OAaRU,EAAMS,W,2CCzCPC,EAAe,I,sCAHnBtB,MAAQ,ICAJuB,EAAc,CAClBC,UDIkB,WAAmC,IAAlC7B,EAAiC,uDAAzB2B,EAAc1B,EAAW,uCACpD,OAAQA,EAAOC,MACb,IEVoB,WFWlB,IAAMC,EAAU,CACdC,GAAIJ,EAAMK,MAAMC,OAChBC,KAAMN,EAAOO,QACbC,UAAU,GAGZ,OAAO,eACFT,EADL,CAEEK,MAAM,GAAD,mBAAML,EAAMK,OAAZ,CAAmBF,MAE5B,IEpBuB,cFqBrB,IAAMO,EAAeV,EAAMK,MAAMM,KAAI,SAACJ,GAKpC,OAJIA,EAAKH,KAAOH,EAAOO,UACrBD,EAAKE,UAAYF,EAAKE,UAGjBF,KAGT,OAAO,eACFP,EADL,CAEEK,MAAOK,IAEX,IEhCuB,cFiCrB,IAAME,EAAgBZ,EAAMK,MAAMQ,QAChC,SAACN,GAAD,OAAUA,EAAKH,KAAOH,EAAOO,WAE/B,OAAO,eACFR,EADL,CAEEK,MAAOO,IAEX,QACE,OAAOZ,KClCE8B,EAFGC,0BAAgBH,GEA5BI,EAAa,CAACC,KAQLC,EANDC,sBACZP,EALmB,GAOnBQ,8BAAoBC,kBAAe,WAAf,EAAmBL,K,QCV5BM,EAAWC,kBAAQ,IAE1BC,EAAQ,IAAIC,gBAAc,CAC9BC,aAAc,CACZC,MAAO,CACLC,OAAQ,CACNvC,MAAO,CACLwC,KADK,WAEH,OAAOP,WAaJQ,EALA,IAAIC,eAAa,CAC9BP,QACAQ,mBAAmB,I,uFCsCNC,EAlDC,SAAChC,GAAU,MAEOiC,mBAAS,IAFhB,mBAElBC,EAFkB,KAERC,EAFQ,KAKjBC,EAAcpC,EAAdoC,UAEFC,EAAe,SAACC,GACpBA,EAAEC,iBAEe,KAAbL,IAIJE,EAAUF,GAEVC,EAAY,MAGd,OACE,0BAAMK,SAAU,SAACF,GAAD,OAAOD,EAAaC,KAClC,kBAACG,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb,kBAACC,EAAA,EAAD,CACEC,YAAY,WACZ1C,MAAO6B,EACPc,SAAU,SAACV,GAAD,OAAOH,EAAYG,EAAEW,OAAO5C,QACtC6C,WAAS,KAGb,kBAACT,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb,kBAACM,EAAA,EAAD,CACEC,QAAQ,WACRC,MAAM,UACNC,SAAuB,KAAbpB,EACVgB,WAAS,EACTK,QAAS,SAACjB,GAAD,OAAOD,EAAaC,KAL/B,W,sECHKkB,EA3BE,SAACxD,GAAW,IACnBV,EAAqCU,EAArCV,KAAMmE,EAA+BzD,EAA/ByD,aAAcC,EAAiB1D,EAAjB0D,aAEtBC,EAAoB,CACxBC,eAAgBtE,EAAKE,SAAW,eAAiB,QAGnD,OACE,kBAACqE,EAAA,EAAD,CAAUC,QAAM,EAACP,QAAS,kBAAME,EAAanE,EAAKH,MAChD,kBAAC4E,EAAA,EAAD,CAAcC,QAAS1E,EAAKA,KAAM2E,MAAON,IACzC,kBAACO,EAAA,EAAD,CAAcX,QAAS,kBAAMG,EAAapE,EAAKH,MAC7C,kBAAC,IAAD,SCMRqE,EAASW,UAAY,CACnB/E,MAAO+E,IAAUC,QACfD,IAAUE,MAAM,CACdlF,GAAIgF,IAAUG,OAAOC,WACrBjF,KAAM6E,IAAUK,OAAOD,WACvB/E,SAAU2E,IAAUM,KAAKF,cAG7Bd,aAAcU,IAAUO,KAAKH,WAC7Bb,aAAcS,IAAUO,KAAKH,YAGhBI,MA7BE,SAAC3E,GAAW,IACnBZ,EAAsCY,EAAtCZ,MAAOqE,EAA+BzD,EAA/ByD,aAAcC,EAAiB1D,EAAjB0D,aAE7B,OACE,kBAACkB,EAAA,EAAD,KACGxF,EAAMM,KAAI,SAACJ,GAAD,OACT,kBAAC,EAAD,CACEuF,IAAKvF,EAAKH,GACVG,KAAMA,EACNmE,aAAcA,EACdC,aAAcA,SCkCToB,EAtCC,WACd,IAAMC,EAAcC,qBAAWnF,GACvBT,EAA2C2F,EAA3C3F,MAAOkB,EAAoCyE,EAApCzE,QAASC,EAA2BwE,EAA3BxE,WAAYC,EAAeuE,EAAfvE,WAE9ByE,EAAQC,cAcd,OACE,kBAACC,EAAA,EAAD,CAAO/B,QAAQ,WAAWa,MAAO,CAAEmB,QAAQ,GAAD,OAAKH,EAAMtC,QAAQ,GAAnB,QACxC,kBAACF,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAG0C,QAAQ,UAClC,kBAAC5C,EAAA,EAAD,CAAMG,MAAI,GACR,kBAAC,OAAD,CAAM0C,KAAMC,IAAWC,MAAM,KAAKC,OAAO,SAG7C,kBAACC,EAAA,EAAD,CAAYC,UAAU,KAAKvC,QAAQ,KAAKwC,MAAM,SAASC,cAAY,GAAnE,gBAEE,kBAAC,EAAD,CAASzD,UArBG,SAAC9C,GACjBgB,EAAQhB,MAqBJ,kBAAC,EAAD,CACEF,MAAOA,EACPqE,aApBa,SAACtE,GACpBoB,EAAWpB,IAoBLuE,aAjBa,SAACvE,GACpBqB,EAAWrB,S,kBCiCA2G,EA/CD,WACZ,IAAM1G,EAAQ2G,aAAY,SAAChH,GAAD,OAAWA,EAAM6B,UAAUxB,SAC/Ce,EAAW6F,cAEXf,EAAQC,cAuBd,OACE,kBAACC,EAAA,EAAD,CAAO/B,QAAQ,WAAWa,MAAO,CAAEmB,QAAQ,GAAD,OAAKH,EAAMtC,QAAQ,GAAnB,QACxC,kBAACF,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAG0C,QAAQ,UAClC,kBAAC5C,EAAA,EAAD,CAAMG,MAAI,GACR,kBAAC,OAAD,CAAM0C,KAAMW,IAAWT,MAAM,KAAKC,OAAO,SAG7C,kBAACC,EAAA,EAAD,CAAYC,UAAU,KAAKvC,QAAQ,KAAKwC,MAAM,SAASC,cAAY,GAAnE,QAEE,kBAAC,EAAD,CAASzD,UA9BG,SAAC9C,GACjBa,EAAS,CACPlB,KPxBkB,WOyBlBM,QAASD,OA4BP,kBAAC,EAAD,CACEF,MAAOA,EACPqE,aA1Ba,SAACtE,GACpBgB,EAAS,CACPlB,KP9BqB,cO+BrBM,QAASJ,KAwBLuE,aApBa,SAACvE,GACpBgB,EAAS,CACPlB,KPpCqB,cOqCrBM,QAASJ,U,2KCrCR,IAAM+G,GAAYC,cAAH,K,qBCuDPC,GAxCA,WAAO,IDLK/E,ECMjBgF,EAASC,mBAASJ,IAAlBG,KACF/F,GDPmBe,ECOEA,EDNpB,SAACkF,GACN,IAAMC,EAAWnF,IAEXnC,EAAU,CACdC,GAAIqH,EAASnH,OACbC,KAAMiH,EACN/G,UAAU,GAGZ6B,EAAS,GAAD,mBAAKmF,GAAL,CAAetH,OCFnBqB,EDMqB,SAACc,GAC5B,OAAO,SAAClC,GACN,IAEMM,EAFW4B,IAEa3B,KAAI,SAACJ,GASjC,OARIA,EAAKH,KAAOA,IAEdG,EAAI,eACCA,EADD,CAEFE,UAAWF,EAAKE,YAIbF,KAIT+B,EAAS5B,ICvBQgH,CAAcpF,GAC3Bb,ED0BqB,SAACa,GAC5B,OAAO,SAAClC,GACN,IAEMM,EAFW4B,IAEazB,QAAO,SAACN,GAAD,OAAUA,EAAKH,KAAOA,KAE3DkC,EAAS5B,IChCQiH,CAAcrF,GAE3B4D,EAAQC,cAcd,OACE,kBAACC,EAAA,EAAD,CAAO/B,QAAQ,WAAWa,MAAO,CAAEmB,QAAQ,GAAD,OAAKH,EAAMtC,QAAQ,GAAnB,QACxC,kBAACF,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAG0C,QAAQ,UAClC,kBAAC5C,EAAA,EAAD,CAAMG,MAAI,GACR,kBAAC,OAAD,CAAM0C,KAAMqB,KAAiBnB,MAAM,KAAKC,OAAO,SAGnD,kBAACC,EAAA,EAAD,CAAYC,UAAU,KAAKvC,QAAQ,KAAKwC,MAAM,SAASC,cAAY,GAAnE,gBAEE,kBAAC,EAAD,CAASzD,UArBG,SAAC9C,GACjBgB,EAAQhB,MAqBJ,kBAAC,EAAD,CACEF,MAAOiH,EAAKjH,MACZqE,aApBa,SAACtE,GACpBoB,EAAWpB,IAoBLuE,aAjBa,SAACvE,GACpBqB,EAAWrB,SCgBAyH,OAjCf,WACE,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CACEC,SAAS,KACT9C,MAAO,CAAE+C,WAAY,OAAQC,cAAe,SAE5C,kBAACvB,EAAA,EAAD,CAAYC,UAAU,KAAKvC,QAAQ,KAAKwC,MAAM,SAASC,cAAY,GAAnE,8BAIA,kBAACpD,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIqE,GAAI,GAAIC,GAAI,GAC7B,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGJ,kBAAC1E,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIqE,GAAI,GAAIC,GAAI,GAC7B,kBAAC,IAAD,CAAUlG,MAAOA,GACf,kBAAC,EAAD,QAGJ,kBAACwB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIqE,GAAI,GAAIC,GAAI,GAC7B,kBAAC,iBAAD,CAAgBtF,OAAQA,GACtB,kBAAC,GAAD,YC7BMuF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bdef2471.chunk.js","sourcesContent":["export const ADD_TODO = \"ADD_TODO\";\nexport const UPDATE_TODO = \"UPDATE_TODO\";\nexport const DELETE_TODO = \"DELETE_TODO\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      const newTodo = {\n        id: state.todos.length,\n        todo: action.payload,\n        complete: false,\n      };\n\n      return {\n        ...state,\n        todos: [...state.todos, newTodo],\n      };\n    case UPDATE_TODO:\n      const updatedTodos = state.todos.map((todo) => {\n        if (todo.id === action.payload) {\n          todo.complete = !todo.complete;\n        }\n\n        return todo;\n      });\n\n      return {\n        ...state,\n        todos: updatedTodos,\n      };\n    case DELETE_TODO:\n      const filteredTodos = state.todos.filter(\n        (todo) => todo.id !== action.payload\n      );\n      return {\n        ...state,\n        todos: filteredTodos,\n      };\n    default:\n      return state;\n  }\n};\n","import React, { useReducer } from \"react\";\nimport { createContext } from \"react\";\nimport TodoContextReducer, {\n  ADD_TODO,\n  UPDATE_TODO,\n  DELETE_TODO,\n} from \"./TodoContextReducer\";\n\nexport const TodoContext = createContext();\n\nconst TodoState = (props) => {\n  const initialState = {\n    todos: [],\n  };\n\n  const [state, dispatch] = useReducer(TodoContextReducer, initialState);\n\n  const addTodo = (todo) => {\n    dispatch({\n      type: ADD_TODO,\n      payload: todo,\n    });\n  };\n\n  const updateTodo = (todo) => {\n    dispatch({\n      type: UPDATE_TODO,\n      payload: todo,\n    });\n  };\n\n  const deleteTodo = (todo) => {\n    dispatch({\n      type: DELETE_TODO,\n      payload: todo,\n    });\n  };\n\n  return (\n    <TodoContext.Provider\n      value={{\n        todos: state.todos,\n        addTodo,\n        updateTodo,\n        deleteTodo,\n      }}\n    >\n      {props.children}\n    </TodoContext.Provider>\n  );\n};\n\nexport default TodoState;\n","import { ADD_TODO, UPDATE_TODO, DELETE_TODO } from \"../../actions/todo\";\n\nclass TodoState {\n  todos = [];\n}\n\nconst initialState = new TodoState();\n\nconst todoReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      const newTodo = {\n        id: state.todos.length,\n        todo: action.payload,\n        complete: false,\n      };\n\n      return {\n        ...state,\n        todos: [...state.todos, newTodo],\n      };\n    case UPDATE_TODO:\n      const updatedTodos = state.todos.map((todo) => {\n        if (todo.id === action.payload) {\n          todo.complete = !todo.complete;\n        }\n\n        return todo;\n      });\n\n      return {\n        ...state,\n        todos: updatedTodos,\n      };\n    case DELETE_TODO:\n      const filteredTodos = state.todos.filter(\n        (todo) => todo.id !== action.payload\n      );\n      return {\n        ...state,\n        todos: filteredTodos,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default todoReducer;\n","import { combineReducers } from \"redux\";\nimport todoState from \"./todo\";\n\nconst rootReducer = {\n  todoState,\n};\n\nconst RootState = combineReducers(rootReducer);\n\nexport default RootState;\n","export const ADD_TODO = \"ADD_TODO\";\nexport const UPDATE_TODO = \"UPDATE_TODO\";\nexport const DELETE_TODO = \"DELETE_TODO\";\n","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"../reducers\";\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;","import { ApolloClient, InMemoryCache, makeVar } from \"@apollo/client\";\n\nexport const todosVar = makeVar([])\n\nconst cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        todos: {\n          read() {\n            return todosVar()\n          }\n        }\n      }\n    }\n  }\n})\n\nconst client = new ApolloClient({\n  cache,\n  connectToDevTools: true,\n});\n\nexport default client;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\n// material ui\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst AddTodo = (props) => {\n  // state\n  const [todoText, setTodoText] = useState(\"\");\n\n  // props\n  const { handleAdd } = props;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (todoText === \"\") {\n      return;\n    }\n\n    handleAdd(todoText);\n\n    setTodoText(\"\");\n  };\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <Grid container spacing={1}>\n        <Grid item xs={9}>\n          <TextField\n            placeholder=\"to do...\"\n            value={todoText}\n            onChange={(e) => setTodoText(e.target.value)}\n            fullWidth\n          />\n        </Grid>\n        <Grid item xs={3}>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            disabled={todoText === \"\"}\n            fullWidth\n            onClick={(e) => handleSubmit(e)}\n          >\n            Add\n          </Button>\n        </Grid>\n      </Grid>\n    </form>\n  );\n};\n\nAddTodo.propTypes = {\n  handleAdd: PropTypes.func.isRequired,\n};\n\nexport default AddTodo;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// material ui\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nconst TodoItem = (props) => {\n  const { todo, handleUpdate, handleDelete } = props;\n\n  const listItemTextStyle = {\n    textDecoration: todo.complete ? \"line-through\" : \"none\",\n  };\n\n  return (\n    <ListItem button onClick={() => handleUpdate(todo.id)}>\n      <ListItemText primary={todo.todo} style={listItemTextStyle} />\n      <ListItemIcon onClick={() => handleDelete(todo.id)}>\n        <DeleteIcon />\n      </ListItemIcon>\n    </ListItem>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n    todo: PropTypes.string.isRequired,\n    complete: PropTypes.bool.isRequired,\n  }).isRequired,\n  handleUpdate: PropTypes.func.isRequired,\n  handleDelete: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// material ui\nimport List from \"@material-ui/core/List\";\n\n// components\nimport TodoItem from \"../TodoItem\";\n\nconst TodoList = (props) => {\n  const { todos, handleUpdate, handleDelete } = props;\n\n  return (\n    <List>\n      {todos.map((todo) => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          handleUpdate={handleUpdate}\n          handleDelete={handleDelete}\n        />\n      ))}\n    </List>\n  );\n};\n\nTodoItem.PropTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      todo: PropTypes.string.isRequired,\n      complete: PropTypes.bool.isRequired,\n    })\n  ),\n  handleUpdate: PropTypes.func.isRequired,\n  handleDelete: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React, { useContext } from \"react\";\nimport { TodoContext } from \"../../Context/TodoContext\";\nimport { Icon } from \"@iconify/react\";\nimport reactIcon from \"@iconify/icons-logos/react\";\n\n// material ui\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useTheme } from \"@material-ui/core/styles\";\n\n// components\nimport AddTodo from \"../AddTodo\";\nimport TodoList from \"../TodoList\";\n\nconst Context = () => {\n  const todoContext = useContext(TodoContext);\n  const { todos, addTodo, updateTodo, deleteTodo } = todoContext;\n\n  const theme = useTheme();\n\n  const handleAdd = (todo) => {\n    addTodo(todo);\n  };\n\n  const handleUpdate = (id) => {\n    updateTodo(id);\n  };\n\n  const handleDelete = (id) => {\n    deleteTodo(id);\n  };\n\n  return (\n    <Paper variant=\"outlined\" style={{ padding: `${theme.spacing(2)}px` }}>\n      <Grid container spacing={2} justify=\"center\">\n        <Grid item>\n          <Icon icon={reactIcon} width=\"50\" height=\"50\" />\n        </Grid>\n      </Grid>\n      <Typography component=\"h2\" variant=\"h5\" align=\"center\" gutterBottom>\n        React.Context\n        <AddTodo handleAdd={handleAdd} />\n        <TodoList\n          todos={todos}\n          handleUpdate={handleUpdate}\n          handleDelete={handleDelete}\n        />\n      </Typography>\n    </Paper>\n  );\n};\n\nexport default Context;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ADD_TODO, UPDATE_TODO, DELETE_TODO } from \"../../actions/todo\";\nimport { Icon } from \"@iconify/react\";\nimport reduxIcon from \"@iconify/icons-logos/redux\";\n\n// material ui\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useTheme } from \"@material-ui/core/styles\";\n\n// components\nimport AddTodo from \"../AddTodo\";\nimport TodoList from \"../TodoList\";\n\nconst Redux = () => {\n  const todos = useSelector((state) => state.todoState.todos);\n  const dispatch = useDispatch();\n\n  const theme = useTheme();\n\n  const handleAdd = (todo) => {\n    dispatch({\n      type: ADD_TODO,\n      payload: todo,\n    });\n  };\n\n  const handleUpdate = (id) => {\n    dispatch({\n      type: UPDATE_TODO,\n      payload: id,\n    });\n  };\n\n  const handleDelete = (id) => {\n    dispatch({\n      type: DELETE_TODO,\n      payload: id,\n    });\n  };\n\n  return (\n    <Paper variant=\"outlined\" style={{ padding: `${theme.spacing(2)}px` }}>\n      <Grid container spacing={2} justify=\"center\">\n        <Grid item>\n          <Icon icon={reduxIcon} width=\"50\" height=\"50\" />\n        </Grid>\n      </Grid>\n      <Typography component=\"h2\" variant=\"h5\" align=\"center\" gutterBottom>\n        Redux\n        <AddTodo handleAdd={handleAdd} />\n        <TodoList\n          todos={todos}\n          handleUpdate={handleUpdate}\n          handleDelete={handleDelete}\n        />\n      </Typography>\n    </Paper>\n  );\n};\n\nexport default Redux;\n","import { gql } from \"@apollo/client\";\n\nexport const GET_TODOS = gql`\n  query getTodos {\n    todos @client {\n      id\n      todo\n      complete\n    }\n  }\n`;\n\nexport const useAddTodo = (todosVar) => {\n  return (text) => {\n    const allTodos = todosVar();\n\n    const newTodo = {\n      id: allTodos.length,\n      todo: text,\n      complete: false,\n    };\n\n    todosVar([...allTodos, newTodo]);\n  };\n};\n\nexport const useUpdateTodo = (todosVar) => {\n  return (id) => {\n    const allTodos = todosVar();\n\n    const updatedTodos = allTodos.map((todo) => {\n      if (todo.id === id) {\n        // gotcha where object entiries can't be changed in place put a fully new copy should be returned \n        todo = {\n          ...todo,\n          complete: !todo.complete\n        }\n      }\n\n      return todo;\n    });\n\n\n    todosVar(updatedTodos);\n  };\n};\n\nexport const useDeleteTodo = (todosVar) => {\n  return (id) => {\n    const allTodos = todosVar();\n\n    const updatedTodos = allTodos.filter((todo) => todo.id !== id);\n\n    todosVar(updatedTodos);\n  };\n};\n","import React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { GET_TODOS, useAddTodo, useUpdateTodo, useDeleteTodo } from \"./query\";\nimport {todosVar} from \"../../ApolloClient\"\nimport { Icon } from \"@iconify/react\";\nimport apollostackIcon from \"@iconify/icons-logos/apollostack\";\n\n// material ui\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useTheme } from \"@material-ui/core/styles\";\n\n// components\nimport AddTodo from \"../AddTodo\";\nimport TodoList from \"../TodoList\";\n\nconst Apollo = () => {\n  const { data } = useQuery(GET_TODOS);\n  const addTodo = useAddTodo(todosVar);\n  const updateTodo = useUpdateTodo(todosVar);\n  const deleteTodo = useDeleteTodo(todosVar);\n\n  const theme = useTheme();\n\n  const handleAdd = (todo) => {\n    addTodo(todo);\n  };\n\n  const handleUpdate = (id) => {\n    updateTodo(id);\n  };\n\n  const handleDelete = (id) => {\n    deleteTodo(id);\n  };\n\n  return (\n    <Paper variant=\"outlined\" style={{ padding: `${theme.spacing(2)}px` }}>\n      <Grid container spacing={2} justify=\"center\">\n        <Grid item>\n          <Icon icon={apollostackIcon} width=\"50\" height=\"50\" />\n        </Grid>\n      </Grid>\n      <Typography component=\"h2\" variant=\"h5\" align=\"center\" gutterBottom>\n        Apollo Client\n        <AddTodo handleAdd={handleAdd} />\n        <TodoList\n          todos={data.todos}\n          handleUpdate={handleUpdate}\n          handleDelete={handleDelete}\n        />\n      </Typography>\n    </Paper>\n  );\n};\n\nexport default Apollo;\n","import React from \"react\";\nimport TodoContext from \"./Context/TodoContext\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport client from \"./ApolloClient\";\n\n// material-ui\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\n\n// components\nimport Context from \"./components/Context\";\nimport Redux from \"./components/Redux\";\nimport Apollo from \"./components/Apollo\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container\n        maxWidth=\"xl\"\n        style={{ paddingTop: \"24px\", paddingBottom: \"24px\" }}\n      >\n        <Typography component=\"h1\" variant=\"h3\" align=\"center\" gutterBottom>\n          Context vs Redux vs Apollo\n        </Typography>\n\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={12} md={4}>\n            <TodoContext>\n              <Context />\n            </TodoContext>\n          </Grid>\n          <Grid item xs={12} sm={12} md={4}>\n            <Provider store={store}>\n              <Redux />\n            </Provider>\n          </Grid>\n          <Grid item xs={12} sm={12} md={4}>\n            <ApolloProvider client={client}>\n              <Apollo />\n            </ApolloProvider>\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}